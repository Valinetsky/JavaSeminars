/*
Task_3.
Реализовать простой калькулятор (+,-,=,*), только с целыми числами.
*/

import java.util.Scanner;

public class HomeWorkTask03 {

	static int getInt(String prompt) {
		System.out.print(prompt);
		while (true) {
			try {
				return Integer.parseInt(new Scanner(System.in).next());
			} catch (NumberFormatException ne) {
				System.out.print("Не удалось распознать число.\n" + prompt);
			}
		}
	}


	public static void main(String[] args) throws java.io.IOException {


        int number_first = getInt("Input first number: ");
		int number_second = getInt("Input second number: ");

        char c = '0';
        boolean flag = true;
        while (flag) {
            System.out.println("Input operation: ");
            c = (char) System.in.read ();
            if (c == '+' || c == '-' || c == '*' || c == '/') {
                flag = false;
            }
        }

        System.out.println(c);

        if (c == '+') {
            System.out.println(number_first + number_second);
        }

        if (c == '-') {
            System.out.println(number_first - number_second);
        }

        if (c == '*') {
            System.out.println(number_first * number_second);
        }

        if (c == '/') {
            if (number_second != 0) {
                System.out.println(number_first / number_second);
            }
            if (number_second == 0) {
                System.out.println("Zero Error");
            }
            
        }
	}
}
	

// package lesson2;
// import java.util.Scanner;

// public class task2 {
//     private static Scanner scan = new Scanner(System.in);
//     public static void main(String[] args) {

// и можно везде вызывать и не закрывать))))


// Основные методы строк
// Метод	Описание
// s.concat()	 объединяет строки
// s.length()	 возвращает длину строки
// s.valueOf()	 преобразует объект в строковый вид
// s.join()	 соединяет строки с учетом разделителя
// s.сompare()	 сравнивает две строки
// s.charAt()	 возвращает символ строки по индексу
// s.getChars()	 возвращает группу символов
// s.equals()	 сравнивает строки с учетом регистра
// s.equalsIgnoreCase()	 сравнивает строки без учета регистра
// s.regionMatches()	 сравнивает подстроки в строках
// s.indexOf()	 находит индекс первого вхождения подстроки в строку
// s.isEmpty()	 возвращает true, если строка пуста, иначе - false
// s.lastIndexOf()	 находит индекс последнего вхождения подстроки в строку
// s.startsWith()	 определяет, начинается ли строка с подстроки
// s.endsWith()	 определяет, заканчивается ли строка на определенную подстроку
// s.replace()	 заменяет в строке одну подстроку на другую
// s.trim()	 удаляет начальные и конечные пробелы
// s.substring()	 возвращает подстроку, начиная с определенного индекса до конца или до определенного индекса
// s.toLowerCase()	 переводит все символы строки в нижний регистр
// s.toUpperCase()	 переводит все символы строки в верхний регистр
// s.toCharArray()	 преобразовывает строку в массив символов


// Task_1
// Дана строка, в которой через пробел перечислены цифры. На следующей строке вводится цифра. Определите индексы первого и последнего её вхождения.

// Sample Input:

// 4 5 3 5 2 6 4 6 6 8 1 2 3 8 4 0 9 7
// 4
// Sample Output:

// 0
// 28


// Task_2

// Формат входных данных:
// На первой строке вводится любимая буква Маши, на второй - Олега. Затем вводится строка, в которой перечислены слова, которые написаны в газете.

// Формат выходных данных:
// На первой строчке выведите, сколько слов выписала Маша, а на второй - сколько слов выписал Олег.  

// Sample Input:

// а
// в
// Автокатастрофа анклав вилка Ванна Шкаф Вагон Азов веранда
// Sample Output:

// 2
// 3


// Task_3

// Для того чтобы выходить в Интернет, каждому компьютеру присваивается так называемый IP-адрес. Он состоит из четырех целых чисел в диапазоне от 0 до 255, разделенных точками. В следующих трех строках показаны три правильных IP-адреса:

// 127.0.0.0
// 192.168.0.01
// 255.00.255.255
// Напишите программу, которая определяет, является ли заданная строка правильным IP-адресом.
// Входные данные
// На вход программе подается строка длиной не более 15 символов, которая включает цифры и точки.

// Выходные данные
// Если строка является правильным IP-адресом, необходимо вывести YES, иначе NO.

// Примечание:
// У вас не получится просто так взять и создать строку, которая содержит точку. Иначе говоря строчка кода:

// String s = ".";
// просто на просто не сработает. Точнее сработает неверно. Для корректного создания строки, содержащей точку используйте экранирование.

// String s = "\\.";
// Sample Input 1:

// 192.168.1.2
// Sample Output 1:

// YES
// Sample Input 2:

// 192.11.690.0
// Sample Output 2:

// NO
// Sample Input 3:

// 67.67.67
// Sample Output 3:

// NO


// Task_4

// Вводится строчка текста, затем, на следующей строке, одна буква латинского алфавита. Найдите, сколько раз в тексте встречается введённый символ в любом регистре. Учтите, что цифры не имеют разницы в записи нижнего и верхнего регистров.

// Sample Input:

// Good morning my dear friend. My fish.
// m
// Sample Output:

// 3


// Task_5
// Вводится строка, определите, каких символов в ней больше: цифр или букв? Напоминаю, что знаки препинания и пробелы, например. не являются ни тем ни другим. Если в строчке больше цифр, то выведите на экран слово "Digit", иначе выведите "Letter". Если же их равное количество, то выведите слово "Equal".

// Sample Input:

// 34Hi56
// Sample Output:

// Digit



// Task_6

// public class Task_6 {

//     //Напишите программу, которая принимает с консоли число в формате byte и записывает его в файл ”result.txt”.
//     //Требуется перехватить все возможные ошибки и вывести их в логгер.
//     //
//     //После написания, попробуйте подать на вход числа 100 и 200 и проследите разницу в результате
//     public static void main(String[] args) {

//     }

//     public String findJewelsInStones(String jewels, String stones){
        
//         return "";
//     }

// }